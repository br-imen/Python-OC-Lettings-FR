name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 pytest pytest-cov
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
      
      - name: Lint code with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
      
      - name: Run tests with coverage
        run: |
          python manage.py migrate
          pytest --cov --cov-fail-under=80
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}

  build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin
      
      - name: Build Docker image
        run: |
          docker build \
          --build-arg SENTRY_DSN=${{ secrets.SENTRY_DSN }} \
          --build-arg SECRET_KEY="${{ secrets.SECRET_KEY }}" \
          --build-arg DEBUG=${{ vars.DEBUG }} \
          --build-arg ALLOWED_HOSTS=${{ vars.ALLOWED_HOSTS }} \
          -t ${{ secrets.DOCKER_HUB_USERNAME }}/oc_lettings_site:${{ github.sha }} .
      
      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/oc_lettings_site:${{ github.sha }}
        
  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install curl and jq
        run: sudo apt-get install -y curl jq

      - name: Get Render Service ID
        id: get_service_id
        run: |
          SERVICE_ID=$(curl -s -X GET "https://api.render.com/v1/services" \
          -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
          | jq -r '.[] | select(.service.name=="oc_lettings_site") | .id')
          echo "SERVICE_ID=$SERVICE_ID" >> $GITHUB_ENV

      - name: Update Docker Image in Render Service
        run: |
          curl -X PATCH "https://api.render.com/v1/services/$SERVICE_ID" \
          -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{
                "serviceDetails": {
                  "dockerImage": "'${{ secrets.DOCKER_HUB_USERNAME }}/oc_lettings_site:${{ github.sha }}'"
                }
              }'

      - name: Monitor Deployment
        run: |
          until [[ $(curl -s -X GET "https://api.render.com/v1/services" \
          -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
          | jq -r --arg SERVICE_ID "$SERVICE_ID" '.[] | select(.id==$SERVICE_ID) | .status') == "live" ]]; do
            echo "Waiting for deployment..."
            sleep 10
          done
          echo "Deployment complete"
