name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 pytest pytest-cov
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
      
      - name: Lint code with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
      
      - name: Run tests with coverage
        run: |
          python manage.py migrate
          pytest --cov --cov-fail-under=80
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}

  build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin
      
      - name: Build Docker image
        run: |
          docker build \
          --build-arg SENTRY_DSN=${{ secrets.SENTRY_DSN }} \
          --build-arg SECRET_KEY="${{ secrets.SECRET_KEY }}" \
          --build-arg DEBUG=${{ vars.DEBUG }} \
          --build-arg ALLOWED_HOSTS=${{ vars.ALLOWED_HOSTS }} \
          -t ${{ secrets.DOCKER_HUB_USERNAME }}/oc_lettings_site:${{ github.sha }} .
      
      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/oc_lettings_site:${{ github.sha }}
        
  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Heroku CLI
        run: |
          curl https://cli-assets.heroku.com/install.sh | sh

      - name: Set up Heroku authentication using API token
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          cat > ~/.netrc <<EOF
          machine api.heroku.com
            login _
            password ${{ secrets.HEROKU_API_KEY }}
          machine git.heroku.com
            login _
            password ${{ secrets.HEROKU_API_KEY }}
          machine registry.heroku.com
            login _
            password ${{ secrets.HEROKU_API_KEY }}
          EOF
          heroku auth:whoami

      - name: Set Heroku stack to container
        run: |
          heroku stack:set container --app ${{ vars.HEROKU_APP_NAME }}

      - name: Set Heroku environment variables
        run: |
          heroku config:set SECRET_KEY="${{ secrets.SECRET_KEY }}" --app ${{ vars.HEROKU_APP_NAME }}

      - name: Pull Docker image from Docker Hub
        run: |
          docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/oc_lettings_site:${{ github.sha }}
          docker tag ${{ secrets.DOCKER_HUB_USERNAME }}/oc_lettings_site:${{ github.sha }} registry.heroku.com/${{ vars.HEROKU_APP_NAME }}/web

      - name: Log in to Heroku Container Registry
        run: |
          echo "${{ secrets.HEROKU_API_KEY }}" | docker login --username=_ --password-stdin registry.heroku.com

      - name: Push Docker image to Heroku Container Registry
        run: |
          docker push registry.heroku.com/${{ vars.HEROKU_APP_NAME }}/web

      - name: Release the Heroku app
        run: |
          heroku container:release web --app ${{ vars.HEROKU_APP_NAME }}

      - name: Monitor deployment
        run: |
          until heroku ps:wait --app ${{ vars.HEROKU_APP_NAME }}; do
            echo "Waiting for deployment..."
            sleep 10
          done
          echo "Deployment complete. App is running at https://${{ vars.HEROKU_APP_NAME }}.herokuapp.com"
